#!/usr/bin/env bash

if which tput >/dev/null 2>&1; then
	ncolors=$(tput colors)
fi
if [[ -t 1 ]] && [[ -n "$ncolors" ]] && [[ "$ncolors" -ge 8 ]] ; then
	RED="$(tput setaf 1)"
	GREEN="$(tput setaf 2)"
	YELLOW="$(tput setaf 3)"
	BLUE="$(tput setaf 4)"
	BOLD="$(tput bold)"
	NORMAL="$(tput sgr0)"
	BOLD=$(tput bold)
	UNDERLINE=$(tput smul)
	NORMAL=$(tput sgr0)
else
	RED=""
	GREEN=""
	YELLOW=""
	BLUE=""
	BOLD=""
	NORMAL=""
	BOLD=""
	UNDERLINE=""
	NORMAL=""
fi

if [ "$1" = "add" ] ; then
	shift
	MODE=0
	if [ "$1" = "--after" ] ; then
		shift
		MODE=1
	elif [ "$1" = "--before" ] ; then
		shift
		MODE=2
	elif [ "$1" = "--help" ] ; then
		echo -e "${UNDERLINE}Usage:${NORMAL}\n"
		echo -e "    $ ${GREEN}daily add [--OPTION] COMMAND"
		echo -e "      ${NORMAL}Add your routine command. If you don't write option, command is added at the end."
		echo -e "      ${YELLOW}Example: daily add brew update${NORMAL}\n"
		echo -e "${UNDERLINE}Options:${NORMAL}\n"
		echo -e "    ${BLUE}--after ORDER_NUMBER		${NORMAL}Add command after order number"
		echo -e "    ${BLUE}--before ORDER_NUMBER		${NORMAL}Add command before order number"
		exit 1
	fi

	if [ $MODE -gt 0 ] ; then
		if [ "$1" =~ [0-9] ] ; then
			ITEM=$1
		else
			echo -e "daily: You have to write 'order number' after '--before' or '--after' option. See 'daily add --help'.\n\n${YELLOW}Example: daily add --after 2 gem update"
			exit 1
		fi
		ITEM=$1
		shift
	fi

	if [ "$1" = "" ] ; then
		echo -e "daily: You have to write the command after 'add' command. See 'daily add --help'.\n\n${YELLOW}Example: daily add brew update"
	else
		if [ $MODE -gt 0 ] ; then
			if [ $MODE = 1 ] ; then
				let ITEM+=1
			fi

			sed -e "$ITEM i\\
				$@" /usr/local/daily/command.txt > /usr/local/daily/command.txt.tmp
			mv /usr/local/daily/command.txt.tmp /usr/local/daily/command.txt
		else
			echo -e "$@" >> /usr/local/daily/command.txt
		fi
	fi
elif [ "$1" = "remove" ] ; then
	shift
	if [ "$1" = "--order" ] ; then
		shift
		if [[ $1 =~ [0-9] ]] ; then
			RESULT=$(sed -n "$1p" /usr/local/daily/command.txt)
			if [ "$RESULT" = "" ] ; then
				echo -e "daily: There is no $1 order."
				exit 1
			fi
			sed -e "$1d" /usr/local/daily/command.txt > /usr/local/daily/command.txt.tmp
			mv /usr/local/daily/command.txt.tmp /usr/local/daily/command.txt
			echo -e "daily: Successfully removed '$RESULT' command."
		else
			echo -e "daily: You have to write 'order number' after 'order' command. See 'daily remove --help'.\n\n${YELLOW}Example: daily remove --order 2"
		fi
	elif [ "$1" = "--help" ] ; then
		echo -e "${UNDERLINE}Usage:${NORMAL}\n"
	    echo -e "    $ ${GREEN}daily remove [--OPTION] COMMAND"
        echo -e "      ${NORMAL}Remove your routine command. If you don't write option, command is deleted by name."
        echo -e "      ${YELLOW}Example: daily remove name brew update${NORMAL}\n"
        echo -e "${UNDERLINE}Options:${NORMAL}\n"
        echo -e "    ${BLUE}--order ORDER_NUMBER      ${NORMAL}Remove command by order number"
		exit 1
	else
		RESULT=$(sed -n "/^$@$/p" /usr/local/daily/command.txt)
		if [ "$RESULT" = "" ] ; then
			echo -e "daily: '$@' is not exist."
			exit 1
		fi
		sed -e "/^$@$/d" /usr/local/daily/command.txt > /usr/local/daily/command.txt.tmp
		mv /usr/local/daily/command.txt.tmp /usr/local/daily/command.txt
		echo -e "daily: Successfully removed '$@' command."
	fi
elif [ "$1" = "list" ] ; then
	shift
	if [ "$1" = "--help" ] ; then
		echo -e "${UNDERLINE}Usage:${NORMAL}\n"
		echo -e "    $ ${GREEN}daily list"
		echo -e "      ${NORMAL}Show your daily routine commands."
		exit 1
	fi
	COUNT=0
	while read -r LINE
	do
		let COUNT++
		echo -e "  [$COUNT] $LINE"
	done < "/usr/local/daily/command.txt"
	if [ $COUNT = 0 ] ; then
		echo -e "daily: Command is not existd. You have to add command.\n\n${YELLOW}Example: daily add brew update"
	fi
elif [ "$1" = "run" ] ; then
	shift
	FILE="/usr/local/daily/command.txt"
	if [ "$1" = "--file" ] ; then
		shift
		if [[ -d "$1" ]] ; then
			FILE=$1
		else
			echo -e "daily: '$1' is not exist."
			exit 1
		fi
	elif [ "$1" = "--help" ] ; then
		echo -e "${UNDERLINE}Usage:${NORMAL}\n"
		echo -e "    $ ${GREEN}daily run [--OPTION]"
		echo -e "      ${NORMAL}Run your daily routine commands.\n"
		echo -e "${UNDERLINE}Options:${NORMAL}\n"
		echo -e "    ${BLUE}--file FILE_NAME		Execute from command list file."
		exit 1
	fi

	START=$SECONDS
	COUNT=0
	while read -r LINE
	do
		let COUNT++
		echo -e "${YELLOW}[$COUNT] '$LINE' execute${NORMAL}"
		eval $LINE
	done < $FILE

	if [ $COUNT = 0 ] ; then
		echo -e "daily: Command is not exist. You have to add command.\n\n${YELLOW}Example: daily add brew update"
	else
		echo -e "\n${YELLOW}daily: Finished!! ($((SECONDS-START)) sec)"
	fi
elif [ "$1" = "help" ] || [ "$1" = "" ] ; then
	echo -e "${UNDERLINE}Usage:${NORMAL} \n"
	echo -e "    $ ${GREEN}daily COMMAND${NORMAL}"
	echo -e "      daily run your routine commands very simply. \n"
	echo -e "${UNDERLINE}Commands:${NORMAL} \n"
	echo -e "    ${GREEN}+ add		${NORMAL}Add your daily routine command"
	echo -e "    ${GREEN}+ remove		${NORMAL}Remove your daily routine command"
	echo -e "    ${GREEN}+ run		${NORMAL}Run your daily routine commands"
	echo -e "    ${GREEN}+ list		${NORMAL}Show your daily routine commands \n"
	echo -e "${UNDERLINE}${BLUE}* daily is simple. *"
else
	echo -e "daily: '$@' is not daily command. See 'daily help'."
fi
